type: edu
custom_name: stage5
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class CoffeeMachine {
        public static int loadedWater = 400;
        public static int loadedMilk = 540;
        public static int loadedBeans = 120;
        public static int loadedCups = 9;
        public static int amountOfMoney = 550;
        public static boolean exit = true;

        public static void main(String[] args) {

            do {
                chooseAction();
            } while (exit);

    //        int coffees = scanner.nextInt();
    //
    //        int portionOfWater = amountOfWater / WATER; // amount of coffees that can be done with that amount of water
    //        int portionOfMilk = amountOfMilk / MILK; // amount of coffees that can be done with that amount of milk
    //        int portionOfBeans = amountOfBeans / BEANS; // amount of coffees that can be done with that amount of beans
    //        int cup = portionOfWater < portionOfMilk ? (Math.min(portionOfWater, portionOfBeans)) :
    //                (Math.min(portionOfMilk, portionOfBeans));
    //
    //        if (cup == coffees) {
    //            System.out.println("Yes, I can make that amount of coffee");
    //        } else if (cup > coffees) {
    //            System.out.printf("Yes, I can make that amount of coffee (and even %d more than that)", cup - coffees);
    //        } else {
    //            System.out.printf("No, I can make only %d cup(s) of coffee", cup);
    //        }
        }

        public static void checkStatus() {
            System.out.println("The coffee machine has: ");
            System.out.printf("%d ml of water \n", loadedWater);
            System.out.printf("%d ml of milk \n", loadedMilk);
            System.out.printf("%d g of coffee beans \n", loadedBeans);
            System.out.printf("%d disposable cups \n", loadedCups);
            System.out.printf("$%d of money \n", amountOfMoney);
        }

        public static void chooseAction() {
            Scanner scanner = new Scanner(System.in);

            System.out.println("Write action (buy, fill, take, remaining, exit): ");
            String action = scanner.nextLine();

            switch (action) {
                case "buy":
                    System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu: ");
                    String numberOfCoffee = scanner.nextLine();

                    switch (numberOfCoffee) {
                        case "1":
                            if (loadedWater >= 250 && loadedBeans >= 16 && loadedCups >= 1) {
                                loadedWater -= 250;
                                loadedBeans -= 16;
                                loadedCups -= 1;
                                amountOfMoney += 4;
                                System.out.println("I have enough resources, making you a coffee!");
                            } else if (loadedWater < 250) {
                                System.out.println("Sorry, not enough water!");
                            } else if (loadedBeans < 16) {
                                System.out.println("Sorry, not enough coffee beans!");
                            } else {
                                System.out.println("Sorry, not enough disposable cups!");
                            }
                            break;
                        case "2":
                            if (loadedWater >= 350 && loadedMilk >= 75 && loadedBeans >= 20 && loadedCups >= 1) {
                                loadedWater -= 350;
                                loadedMilk -= 75;
                                loadedBeans -= 20;
                                loadedCups -= 1;
                                amountOfMoney += 7;
                                System.out.println("I have enough resources, making you a coffee!");
                            } else if (loadedWater < 350) {
                                System.out.println("Sorry, not enough water!");
                            } else if (loadedMilk < 75) {
                                System.out.println("Sorry, not enough milk!");
                            } else if (loadedBeans < 20) {
                                System.out.println("Sorry, not enough coffee beans!");
                            } else {
                                System.out.println("Sorry, not enough disposable cups!");
                            }
                            break;
                        case "3":
                            if (loadedWater >= 200 && loadedMilk >= 100 && loadedBeans >= 12 && loadedCups >= 1) {
                                loadedWater -= 200;
                                loadedMilk -= 100;
                                loadedBeans -= 12;
                                loadedCups -= 1;
                                amountOfMoney += 6;
                                System.out.println("I have enough resources, making you a coffee!");
                            } else if (loadedWater < 200) {
                                System.out.println("Sorry, not enough water!");
                            } else if (loadedMilk < 100) {
                                System.out.println("Sorry, not enough milk!");
                            } else if (loadedBeans < 12) {
                                System.out.println("Sorry, not enough coffee beans!");
                            } else {
                                System.out.println("Sorry, not enough disposable cups!");
                            }
                            break;
                        case "back":
                            break;
                        default:
                            System.out.println("Error");
                            break;
                    }
                    break;
                case "fill":
                    System.out.println("Write how many ml of water you want to add: ");
                    int addedWater = scanner.nextInt();
                    loadedWater += addedWater;

                    System.out.println("Write how many ml of milk you want to add: ");
                    int addedMilk = scanner.nextInt();
                    loadedMilk += addedMilk;

                    System.out.println("Write how many grams of coffee beans you want to add: ");
                    int addedBeans = scanner.nextInt();
                    loadedBeans += addedBeans;

                    System.out.println("Write how many disposable cups of coffee you want to add: ");
                    int addedCups = scanner.nextInt();
                    loadedCups += addedCups;
                    break;
                case "take":
                    System.out.printf("I gave you $%d", amountOfMoney);
                    amountOfMoney = 0;
                    break;
                case "remaining":
                    checkStatus();
                    System.out.println(" ");
                    break;
                case "exit":
                    exit = false;
                default:
                    System.out.println(" ");
                    break;
            }
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/179/implement#comment
status: Solved
record: 5
